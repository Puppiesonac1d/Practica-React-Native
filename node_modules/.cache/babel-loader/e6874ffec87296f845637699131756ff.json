{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Desktop/React-Native/01-reforzamiento/src/components/Login.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useReducer, useEffect } from 'react'; //Creamos la interfaz para dar la base a las futuras funciones\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  //apenas se carge el componente, automáticamente validando será true\n  validando: true,\n  token: null,\n  userName: '',\n  nombre: ''\n};\n\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    //Limpiar los datos cuando la acción del Auth / AuthAction sea Logout\n    case 'logout':\n      return {\n        validando: false,\n        token: null,\n        userName: '',\n        nombre: ''\n      };\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport const Login = () => {\n  _s();\n\n  //Reducer es una función compleja, que utiliza y retorna varios parámetros, a diferencia de un useState que es más simple\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    setTimeout(() => {\n      dispatch({\n        type: 'logout'\n      });\n    }, 1500);\n  }, []);\n\n  if (state.validando) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-info\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Validando...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"No autenticado.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Autenticado.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger\",\n      children: \"Logout\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Login, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n\n_c = Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["/Users/diego/Desktop/React-Native/01-reforzamiento/src/components/Login.tsx"],"names":["React","useReducer","useEffect","initialState","validando","token","userName","nombre","authReducer","state","action","type","Login","dispatch","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,OAAtC,C,CAEA;;;;AAQA,MAAMC,YAAuB,GAAG;AAC5B;AACAC,EAAAA,SAAS,EAAE,IAFiB;AAG5BC,EAAAA,KAAK,EAAE,IAHqB;AAI5BC,EAAAA,QAAQ,EAAE,EAJkB;AAK5BC,EAAAA,MAAM,EAAE;AALoB,CAAhC;;AAUA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAmBC,MAAnB,KAAqD;AACrE,UAAQA,MAAM,CAACC,IAAf;AACI;AACA,SAAK,QAAL;AACI,aAAO;AACHP,QAAAA,SAAS,EAAE,KADR;AAEHC,QAAAA,KAAK,EAAE,IAFJ;AAGHC,QAAAA,QAAQ,EAAE,EAHP;AAIHC,QAAAA,MAAM,EAAE;AAJL,OAAP;AAMA;;AACJ;AACI,aAAOE,KAAP;AAXR;AAcH,CAfD;;AAiBA,OAAO,MAAMG,KAAK,GAAG,MAAM;AAAA;;AACvB;AACA,QAAM,CAACH,KAAD,EAAQI,QAAR,IAAoBZ,UAAU,CAACO,WAAD,EAAcL,YAAd,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,UAAU,CAAC,MAAM;AACbD,MAAAA,QAAQ,CAAC;AAAEF,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;AACH,KAFS,EAEP,IAFO,CAAV;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,MAAIF,KAAK,CAACL,SAAV,EAAqB;AACjB,wBACI;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ,qBADJ;AAOH;;AACD,sBACI;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAGI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHJ,eAMI;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA,6BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YANJ,eASI;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,eAUI;AAAQ,MAAA,SAAS,EAAC,gBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA,kBADJ;AAcH,CAjCM;;GAAMQ,K;;KAAAA,K","sourcesContent":["import React from 'react'\nimport { useReducer, useEffect } from 'react';\n\n//Creamos la interfaz para dar la base a las futuras funciones\ninterface AuthState {\n    validando: boolean,\n    token: string | null,\n    userName: string,\n    nombre: string\n}\n\nconst initialState: AuthState = {\n    //apenas se carge el componente, automáticamente validando será true\n    validando: true,\n    token: null,\n    userName: '',\n    nombre: ''\n}\n\ntype AuthAction = { type: 'logout' };\n\nconst authReducer = (state: AuthState, action: AuthAction): AuthState => {\n    switch (action.type) {\n        //Limpiar los datos cuando la acción del Auth / AuthAction sea Logout\n        case 'logout':\n            return {\n                validando: false,\n                token: null,\n                userName: '',\n                nombre: ''\n            }\n            break;\n        default:\n            return state;\n    }\n\n}\n\nexport const Login = () => {\n    //Reducer es una función compleja, que utiliza y retorna varios parámetros, a diferencia de un useState que es más simple\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    useEffect(() => {\n        setTimeout(() => {\n            dispatch({ type: 'logout' });\n        }, 1500);\n    }, [])\n\n    if (state.validando) {\n        return (\n            <>\n                <div className='alert alert-info'>\n                    <span>Validando...</span>\n                </div>\n            </>\n        )\n    }\n    return (\n        <>\n            <h3>Login</h3>\n\n            <div className='alert alert-danger'>\n                <span>No autenticado.</span>\n            </div>\n            <div className='alert alert-success'>\n                <span>Autenticado.</span>\n            </div>\n            <button className='btn btn-primary'>Login</button>\n            <button className='btn btn-danger'>Logout</button>\n        </>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}